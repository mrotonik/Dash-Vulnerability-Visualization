import dash
from dash import dcc, html, Input, Output, State
import plotly.graph_objects as go

app = dash.Dash(__name__)

initial_values = [1, 0.89, 0.8, 1, 0.88]
initial_labels = ["Аудит і логування", "Аутентифікація та авторизація", "Захист даних", "Встановлення оновлень", "Зменшення площі атак"]

app.layout = html.Div([
    html.H1("Графік вразливостей"),
    dcc.Graph(id='polar-chart'),
    html.Label('Введіть значення для кожного параметра:'),
    html.Div(id='input-container', children=[
        html.Div([
            dcc.Input(id=f'label-{i}', type='text', value=initial_labels[i]),
            dcc.Input(id=f'input-{i}', type='number', value=initial_values[i], step=0.01),
            html.Button('Видалити', id=f'delete-{i}', n_clicks=0)
        ], style={'display': 'flex', 'gap': '10px'}) for i in range(len(initial_labels))
    ]),
    html.Label('Встановити максимальне значення:'),
    dcc.Input(id='max-value', type='number', value=1.0, step=0.01),
    html.Button('Оновити графік', id='update-button', n_clicks=0),
    html.Br(),
    html.Label('Додати новий параметр:'),
    dcc.Input(id='new-label', type='text', placeholder='Новий лейбл'),
    dcc.Input(id='new-value', type='number', placeholder='Нове значення', step=0.01),
    html.Button('Додати параметр', id='add-button', n_clicks=0),
])

@app.callback(
    Output('input-container', 'children'),
    Input('add-button', 'n_clicks'),
    State('new-label', 'value'),
    State('new-value', 'value'),
    State('input-container', 'children'),
    *[Input(f'delete-{i}', 'n_clicks') for i in range(len(initial_labels))]
)
def add_or_delete_input(n_clicks_add, new_label, new_value, children, *n_clicks_delete):
    ctx = dash.callback_context

    if ctx.triggered and "delete-" in ctx.triggered[0]['prop_id']:
        delete_index = int(ctx.triggered[0]['prop_id'].split('.')[0].split('-')[1])
        children.pop(delete_index)
        for i in range(delete_index, len(children)):
            children[i]['props']['id'] = f'input-{i}'
            children[i]['props']['children'][0]['props']['id'] = f'label-{i}'
            children[i]['props']['children'][1]['props']['id'] = f'input-{i}'
            children[i]['props']['children'][2]['props']['id'] = f'delete-{i}'
    elif new_label and new_value is not None and n_clicks_add > 0:
        new_input = html.Div([
            dcc.Input(id=f'label-{len(children)}', type='text', value=new_label),
            dcc.Input(id=f'input-{len(children)}', type='number', value=new_value, step=0.01),
            html.Button('Видалити', id=f'delete-{len(children)}', n_clicks=0)
        ], style={'display': 'flex', 'gap': '10px'})
        children.append(new_input)
    return children

@app.callback(
    Output('polar-chart', 'figure'),
    Input('update-button', 'n_clicks'),
    State('input-container', 'children'),
    State('max-value', 'value')
)
def update_chart(n_clicks, children, max_value):
    values = [float(child['props']['children'][1]['props']['value']) for child in children]
    labels = [child['props']['children'][0]['props']['value'] for child in children]

    values += values[:1]
    labels += labels[:1]

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=[v * 100 for v in values],
        theta=labels,
        fill='toself',
        text=[f'<b>{v * 100:.0f}%</b>' for v in values],
        hoverinfo='text+theta',
        mode='markers+text',
        textposition='top center',
        textfont=dict(size=14),
        marker=dict(size=10, symbol='circle')
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, max_value * 100],
                tickvals=[i for i in range(0, int(max_value * 100) + 1, 20)],
                ticktext=[f'{i}%' for i in range(0, int(max_value * 100) + 1, 20)],
                ticks='outside',
                ticklen=15
            ),
            angularaxis=dict(
                direction="clockwise",
                ticklen=20
            )
        ),
        margin=dict(l=20, r=20, t=20, b=20),
        showlegend=False
    )

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
